1 - Exercices d'échauffement
  1.1 - C'est protocole qui se trouve dans la couche Application de l'architecture TCP/IP.
  Couches TCP/IP : Physique(Ethernet 802.3, Wifi 802.11, PPP) | IP | TCP ou Transport(TCP/UDP) | Application(HTTP, SMTP, FTP)
  Tous les protocoles se trouvant au dessus de TCP et UDP sont des protocoles applicatifs.

  1.2 - a) Web(Internet Explorer, Firefox, Chrome ...) | b) Messagerie instantanée | c) Messagerie | d) Transfert de fichiers
      *) Protocoles utilisés :
      a) HTTP
      b) et c) SMTP, POP, IMAP
      d) FTP, TFTP


  1.3 - Modèle de communication : Client/Serveur
        Rôle des participants : Client | C'est toujours le client qui initie la communication.
	Le programme serveur est un programme qui attend les requêtes en permanence.


  1.4 - Web :
      	    Débit : Variable
	    Tolérance variation débit : Oui
	    Accepter les pertes de paquets : Non
	    Contraintes temporelles : Non
	    
        Messagerie :
      	    Débit : Variable
	    Tolérance variation débit : Oui
	    Accepter les pertes de paquets : Non
	    Contraintes temporelles : Non
	    
	Transfert de fichiers :
      	    Débit : Variable
	    Tolérance variation débit : Oui
	    Accepter les pertes de paquets : Non
	    Contraintes temporelles : Non
	    
	Audio/Vidéo :
	    Débit : qq kbps à 1 mbps
	    Tolérance variation débit : Non
	    Accepter les pertes de paquets : Oui
	    Contraintes temporelles : qq 100ms

	Streaming :
	    Débit : qq kbps à 10 mbps
	    Tolérance variation débit : Un peu
	    Accepter les pertes de paquets : Oui
	    Contraintes temporelles : qqs 100ms 

	Jeux Interactifs :
	    Débit : qq kbos - qq 10kbps
	    Tolérance variation débit : Non
	    Accepter les pertes de paquets : Un peu
	    Contraintes temporelles : qqs 100ms

	Messagerie Instantanée :
	    Débit : Variable
	    Tolérance variation débit : Non
	    Accepter les pertes de paquets : Non
	    Contraintes temporelles : ça dépend de la vitesse de l'écriture ==> Il y a de la marge donc assez de temps.


REMARQUES :
   - TCP augmente et baisse la taille des paquets envoyés selon le débit. Les applications fonctionnant avec TCP s'appelles les applications élastiques, car elles s'adaptent au débit.
   - Dans le streaming il y a des codecs qui limite le débit du flux. ==> Le débit du flux dépend du codec utilisé.
   - Le tampon dans le streaming sert à compenser les délais et assurer la fluidité audio/vidéo.
   - 1 paquets dans le streaming vidéo contient 20 millisecondes. Donc on ne peut pas apercevoir les pertes quand elles sont faibles.
   - Dans les jeux en lignes seulement les commandes sont envoyés sur le réseaux, le reste est chargé et traité en local.


2 - Connexion à distance
  2.1 - Les applications de connexion à distance permettent de se connecter à une machine à distance en émulant son interface de contrôle localement.
  2.2 - Tous ce qui provient du clavier de l'utilisateur et les retours sur l'écran.
        échange de codage NVT(Network Virtual Terminal - Encodage 7 bits) des caractères correspondant aux flux provenant du clavier/données destinées à l'affichage sur le terminal client.
  2.3	Le codage NVT sert de codage universel pour gérer les problèmes des différents encodages utilisés par les différent(e)s machines/systèmes. ==> Assurer l'interropérabilités entre systèmes.
	Exemple : Les machines IBM utilisent l'encodage EBCDIC alors que les machines Unix utilisent l'encodage ASCII.
  2.4 - Transmission fiable ==> TCP.


2.2 Protocole TELNET :
    2.2.2 -
    	  1 - Dans la trame on peut remarquer l'envoie des lettres une par une. (Dans Telnet se trouvant dans "fenêtre du mileu")
	  2 - 8 premiers trames

    2.2.3 -
    	  1 - À partir de la trame 9.
	  2 - 1 caractère tapé au clavier :
	      - Transmission émise immédiatement pour envoyer le caractère au serveur.
	      - Un autre caractère retrouvé ... être affecté

	  3 - E = Données utilisateur/Données envoyées sur le serveur = 1/67
	  4 - Très élevé !
	  5 - Ce que l'utilisateur tape + ce que renvoie le serveur distant.
	  Analyse --> Follow TCP Stream


    2.2.4 - À faire en autonome.



2.3 - Protocole RLOGIN :
    2.3.2 -
    	  1 - Nom d'utilisateur, type de terminal
	  2 - La négociation est beaucoup plus longue.
	  3 - L'identifiant envoyé en une fois.

    2.3.3


2.4 - Protocole SSH :
    2.4.2 -
    	  1 - échange de clés (Qui servent à chiffrer et déchiffrer les données)
	  2 - La cryptographie est utilisée pour chiffrer la communication.
	  -> Entraîner un débit supérieur.
    2.4.3 - 


3 - Transfert de Fichiers :

3.1 Protocole FTP :  

    3.1.1 -
    	  1 -   Forme : Texte en .txt ou .pdf.
	     -  Sections :
	      	        - Introduction : 
			- Terminologie :
			- Architecture : Présente les éléments qui participent au protocole.
			- Messages : Messages et échanges protocolaires.
		*Les RFC des différents protocoles se constituent tous des mêmes sections.


          2 - Client                            Serveur
	   -----------     Contrôle         --------------
          |         #|----------------------|#21         |
          |         #|----------------------|#20         |
          |__________|     Données          |____________|



	  3 - RFC 929
	  USER, PASS, CWD, QUIT, PORT, RETR, DELE, LIST

	  4 - 500 : syntax error
	      503 : bad sequence of commands
	      425 : can't open data connection


    3.1.3 : Filtre = ftp ou tcp
    	  1 - Client   TCP SYN --------->
	               	       <---------  TCP SYN-ACK
		       TCP ACK --------->

	  2 - USER
	  3 - PASS
	  4 - SYST : Pour donner le type du système serveur.
	  5 - PORT : Indique l'adresse + le numéro de port sur lequel le serveur va créer une future connexion de données.
	  Ex : PORT(10.33.182.178.128.229)
      Adresse----->10.33.182.178 (128*256)+255 = 32996 <---- numéro de port

          Anticiper le retour d'information des commandes comme LIST, RETR ou CWD qui passe par la voie data.
	  6 - LIST : Début du transfert de la réponse par la voie data. Terminaison à la fin du transfert.

	  7- CWD : Changer de répertoire
	  8 - Après les commandes LIST RETR


    3.1.4 -
    	  1 - Les réponses des commandes LIST et RETR <nom de fichier>
	  2 - ?
	  3 - a) Le serveur envoie 150 --> le canal de contrôle
	      b) échange sur la connexion de données
	      c) Le serveur envoie 226 --> le canal de contrôle


    3.2.2 -
    	  1 - SCP = Come RCP(Trandfert de fichier en une seule connexion) --> Encapsulé dans SSH
	    - SFTP = Comme FTP(Transfert de fichiers en 2 connexions) --> Encapsulé dans 1 seul tunnel SSH

	  2 - Nom, c'est crypté !
	  3 - Cryptographie --> Entrainer


    3.3.2 -
    	  1- sur UDP --> Protocole stop and wait
    	  2 - Oui
    	  3 - UDP - Une seule connexion - Simple
	  

4 Trafic Web


4.1 - Exercices (Sans machine)
    4.1.1 (HTTP 1.0) : Le protocole HTTP initialise une nouvelle connextion(SYN, SYN-ACK, ACK) à chaque requête faite par la client(GET Page Html, GET objet, etc.)
    4.1.2 (HTTP 1.1) : Est une version optimisée de HTTP 1.0. Dans cette version (1.1), la connexion est initialisée une seule fois au début. Toutes les requêtes
                       lancées après par le client se font directement en utilisant la connexion de départ, ce qui réduit considérablement les RTT (Round Trip Time - à voir).
		       - Dans HTTP 1.1 interviennent aussi les pipelines, qui servent à augmenter la taille du tunnel de transfert de données ce qui réduit aussi les RTT puisque
		       le client dans ce cas a la possibilité de lancer plusieurs requêtes(GET par exemple) en même temps et de recevoir les données d'un coup. Ce qui ne se fait
		       pas sans pipeline. Sans pipe line il y a un RTT pour chaque requêtes, alors qu'avec pipeline on peut avoir un RTT pour plusieurs requêtes.
    ==> Photos représentant les chronogrammes des questions 4.1.1 et 4.1.2 se trouvant dans le même dossier que ce fichier.

    4.1.3 - Proxy --> Dans les réseax LAN (Proche de l'utilisateur)


    
Début de chronogramme : Chronogramme complet pris en photo
  Client                  Serveur 
    |TCP-SYN --------------->|
    |<------------TCP-SYN-ACK|
    |TCP-ACK---------------->|
    |HTTP GET Page Html      |
    |----------------------->|
    | HTTP reponse page html |
    |<-----------------------|
    |                        |
    |                        |
    |                        |
    |                        |
    |                        |
    |                        |
    |                        |
    |                        |
    |                        |
    |                        |


4.2 - Protocole HTTP
    4.2.2 :
    	  1 - Analyse d'une première page --> Récupération des sous-objets.
	  2 - Types acceptés par le client (GET) et par le serveur (Dans la réponse)
	  3 - keep-alive
	  4 - Oui --> Assembler les textes --> l'ouvrir dans la navigation  
